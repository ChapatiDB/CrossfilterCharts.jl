{
    "docs": [
        {
            "location": "/", 
            "text": "DC.jl Documentation\n\n\n\n\nDC.jl Documentation\n\n\nIndex\n\n\n\n\n\n\n\n\n#\n\n\nDC.dc\n \n \nFunction\n.\n\n\ndc(df::DataFrame)\n\n\n\n\nConstruct a DC.js visualization based on the columns in the given DataFrame. This is the easiest and most straightforward way to use DC.jl.\n\n\n#\n\n\nDC.rowchart\n \n \nFunction\n.\n\n\nrowchart\n\n\n\n\nInfer construction of a DC rowchart based on the given group.\n\n\n#\n\n\nDC.barchart\n \n \nFunction\n.\n\n\nbarchart\n\n\n\n\nInfer construction of a DC barchart based on the given group.\n\n\n#\n\n\nDC.piechart\n \n \nFunction\n.\n\n\npiechart\n\n\n\n\nInfer construction of a DC piechart based on the given group.\n\n\n#\n\n\nDC.linechart\n \n \nFunction\n.\n\n\nlinechart\n\n\n\n\nInfer construction of a DC linechart based on the given group.\n\n\n#\n\n\nDC.datacountwidget\n \n \nFunction\n.\n\n\ndatacountwidget\n\n\n\n\nConstruct a DC DataCountWidget.\n\n\n#\n\n\nDC.datatablewidget\n \n \nFunction\n.\n\n\ndatatablewidget\n\n\n\n\nConstruct a DC DataTableWidget.\n\n\n#\n\n\nDC.add_chart!\n \n \nFunction\n.\n\n\nadd_chart!\n\n\n\n\nAppend the DCChart to the list of charts in the DCOut object.\n\n\n#\n\n\nDC.add_widget!\n \n \nFunction\n.\n\n\nadd_widget!\n\n\n\n\nAppend the DCWidget to the list of widgets in the DCOut object.\n\n\n#\n\n\nDC.add_group!\n \n \nFunction\n.\n\n\nadd_group!\n\n\n\n\nAppend the Group to the list of groups in the DCOut object.\n\n\n#\n\n\nDC.add_datacountwidget!\n \n \nFunction\n.\n\n\nadd_datacountwidget!\n\n\n\n\nConstruct and append a Data Count Widget to the DCOut object.\n\n\n#\n\n\nDC.add_datatablewidget!\n \n \nFunction\n.\n\n\nadd_datatablewidget!\n\n\n\n\nConstruct and append a Data Table Widget to the DCOut object. Requires a previously constructed dimension for the first column.\n\n\n#\n\n\nDC.quick_add!\n \n \nFunction\n.\n\n\nquick_add!\n\n\n\n\nA utility function for quickly building a chart and adding it. Works with linechart, barchart, rowchart, piechart. Requires previously a constructed group.\n\n\n#\n\n\nDC.clear_charts!\n \n \nFunction\n.\n\n\nclear_charts!\n\n\n\n\nRemove all charts from the DCOut object.\n\n\n#\n\n\nDC.randomize_ids!\n \n \nFunction\n.\n\n\nrandomize_ids!\n\n\n\n\nRandomly re-initialize all dcout random ids. These are used when exporting to HTML to prevent charts from referencing one another across IJulia cells.\n\n\n#\n\n\nDC.reduce_count\n \n \nFunction\n.\n\n\nreduce_count\n\n\nA reduction for a Group that is simply reduceCount()\n\n\n#\n\n\nDC.reduce_sum\n \n \nFunction\n.\n\n\nreduce_sum\n\n\nA reduction for a Group that sums the values.\n\n\n#\n\n\nDC.reduce_master\n \n \nFunction\n.\n\n\nreduce_sum\n\n\nA master reduction which sums values from all provided columns and tallies a count.  Useful for making more complex charts like bubble charts.\n\n\n#\n\n\nDC.can_infer_chart\n \n \nFunction\n.\n\n\ncan_infer_chart(arr::AbstractDataArray)\n\n\n\n\nWhether chart inference is supported for the given array type.\n\n\n#\n\n\nDC.infer_dimension\n \n \nFunction\n.\n\n\ninfer_dimension\n\n\n\n\nConstructs a Dimension suitable for the type in arr.\n\n\n#\n\n\nDC.infer_group\n \n \nFunction\n.\n\n\ninfer_group\n\n\nInfer construction of a group based on the array datatype.\n\n\n#\n\n\nDC.infer_chart\n \n \nFunction\n.\n\n\ninfer_chart(arr::AbstractDataArray, group::Group)\n\n\n\n\nConstructs a Chart suitable for the type in arr.\n\n\n#\n\n\nDC.infer_dimensions!\n \n \nFunction\n.\n\n\ninfer_dimensions!\n\n\n\n\nInfer a dimension for each column in the DCOut DataFrame\n\n\n#\n\n\nDC.infer_groups!\n \n \nFunction\n.\n\n\ninfer_groups!\n\n\n\n\nInfer a group for each dimension in the DCOut DataFrame\n\n\n\n\nIndex\n\n\n\n\nDC.add_chart!\n\n\nDC.add_datacountwidget!\n\n\nDC.add_datatablewidget!\n\n\nDC.add_group!\n\n\nDC.add_widget!\n\n\nDC.barchart\n\n\nDC.can_infer_chart\n\n\nDC.clear_charts!\n\n\nDC.datacountwidget\n\n\nDC.datatablewidget\n\n\nDC.dc\n\n\nDC.infer_chart\n\n\nDC.infer_dimension\n\n\nDC.infer_dimensions!\n\n\nDC.infer_group\n\n\nDC.infer_groups!\n\n\nDC.linechart\n\n\nDC.piechart\n\n\nDC.quick_add!\n\n\nDC.randomize_ids!\n\n\nDC.reduce_count\n\n\nDC.reduce_master\n\n\nDC.reduce_sum\n\n\nDC.rowchart", 
            "title": "Home"
        }, 
        {
            "location": "/#dcjl-documentation", 
            "text": "DC.jl Documentation  Index     #  DC.dc     Function .  dc(df::DataFrame)  Construct a DC.js visualization based on the columns in the given DataFrame. This is the easiest and most straightforward way to use DC.jl.  #  DC.rowchart     Function .  rowchart  Infer construction of a DC rowchart based on the given group.  #  DC.barchart     Function .  barchart  Infer construction of a DC barchart based on the given group.  #  DC.piechart     Function .  piechart  Infer construction of a DC piechart based on the given group.  #  DC.linechart     Function .  linechart  Infer construction of a DC linechart based on the given group.  #  DC.datacountwidget     Function .  datacountwidget  Construct a DC DataCountWidget.  #  DC.datatablewidget     Function .  datatablewidget  Construct a DC DataTableWidget.  #  DC.add_chart!     Function .  add_chart!  Append the DCChart to the list of charts in the DCOut object.  #  DC.add_widget!     Function .  add_widget!  Append the DCWidget to the list of widgets in the DCOut object.  #  DC.add_group!     Function .  add_group!  Append the Group to the list of groups in the DCOut object.  #  DC.add_datacountwidget!     Function .  add_datacountwidget!  Construct and append a Data Count Widget to the DCOut object.  #  DC.add_datatablewidget!     Function .  add_datatablewidget!  Construct and append a Data Table Widget to the DCOut object. Requires a previously constructed dimension for the first column.  #  DC.quick_add!     Function .  quick_add!  A utility function for quickly building a chart and adding it. Works with linechart, barchart, rowchart, piechart. Requires previously a constructed group.  #  DC.clear_charts!     Function .  clear_charts!  Remove all charts from the DCOut object.  #  DC.randomize_ids!     Function .  randomize_ids!  Randomly re-initialize all dcout random ids. These are used when exporting to HTML to prevent charts from referencing one another across IJulia cells.  #  DC.reduce_count     Function .  reduce_count  A reduction for a Group that is simply reduceCount()  #  DC.reduce_sum     Function .  reduce_sum  A reduction for a Group that sums the values.  #  DC.reduce_master     Function .  reduce_sum  A master reduction which sums values from all provided columns and tallies a count.  Useful for making more complex charts like bubble charts.  #  DC.can_infer_chart     Function .  can_infer_chart(arr::AbstractDataArray)  Whether chart inference is supported for the given array type.  #  DC.infer_dimension     Function .  infer_dimension  Constructs a Dimension suitable for the type in arr.  #  DC.infer_group     Function .  infer_group  Infer construction of a group based on the array datatype.  #  DC.infer_chart     Function .  infer_chart(arr::AbstractDataArray, group::Group)  Constructs a Chart suitable for the type in arr.  #  DC.infer_dimensions!     Function .  infer_dimensions!  Infer a dimension for each column in the DCOut DataFrame  #  DC.infer_groups!     Function .  infer_groups!  Infer a group for each dimension in the DCOut DataFrame", 
            "title": "DC.jl Documentation"
        }, 
        {
            "location": "/#index", 
            "text": "DC.add_chart!  DC.add_datacountwidget!  DC.add_datatablewidget!  DC.add_group!  DC.add_widget!  DC.barchart  DC.can_infer_chart  DC.clear_charts!  DC.datacountwidget  DC.datatablewidget  DC.dc  DC.infer_chart  DC.infer_dimension  DC.infer_dimensions!  DC.infer_group  DC.infer_groups!  DC.linechart  DC.piechart  DC.quick_add!  DC.randomize_ids!  DC.reduce_count  DC.reduce_master  DC.reduce_sum  DC.rowchart", 
            "title": "Index"
        }
    ]
}